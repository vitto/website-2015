// http://css-tricks.com/snippets/css/a-guide-to-flexbox/

.addFlexGridContainer(
    @selector                  ,
    @hdFullColums              : 4,
    @hdReadyColums             : 4,
    @tabletLandscapeColums     : 3,
    @tabletPortraitColums      : 2,
    @smartphoneLandscapeColums : 1,
    @smartphonePortraitColums  : 1
    ) {

    // set @hdColumns to [false] instead an [integer] to disable automatic columns
    @enableColumns : @hdFullColums;

    .@{selector} {
        .display(flex);
        .flex-wrap(wrap);
    }

    .@{selector} > * {
        ._setFlexGridColumnBehavior();
    }

    ._setFlexGridViewprtColumns(@from-smartphone-portrait,  @smartphonePortraitColums,  @selector, @enableColumns);
    ._setFlexGridViewprtColumns(@from-smartphone-landscape, @smartphoneLandscapeColums, @selector, @enableColumns);
    ._setFlexGridViewprtColumns(@from-tablet-portrait,      @tabletPortraitColums,      @selector, @enableColumns);
    ._setFlexGridViewprtColumns(@from-tablet-landscape,     @tabletLandscapeColums,     @selector, @enableColumns);
    ._setFlexGridViewprtColumns(@from-hd-ready,             @hdReadyColums,             @selector, @enableColumns);
    ._setFlexGridViewprtColumns(@from-hd-full,              @hdFullColums,              @selector, @enableColumns);

}

.addFlexGridColumns(
    @hdSteps                  : 12,
    @tabletSteps              : @hdSteps,
    @smartphoneSteps          : @tabletSteps,
    @hdViewportPrefix         : hd-flex-,
    @tabletViewportPrefix     : tablet-flex-,
    @smartphoneViewportPrefix : smartphone-flex-,
    @fillFromViewport         : "smartphone-landscape",
    @viewTotalColumns         : true,
    @columnsSeparator         : -of-,
    @useHdRules               : true,
    @useTabletRules           : true,
    @useSmartphoneRules       : true
    ) {

    ._addFlexGridColumnSetRule(
        @from-smartphone-portrait,
        @smartphoneViewportPrefix, @smartphoneSteps,
        @tabletViewportPrefix, @tabletSteps,
        @hdViewportPrefix, @hdSteps,
        @viewTotalColumns, @columnsSeparator,
        @useSmartphoneRules
    );

    ._addFlexGridColumnSetRule(
        @from-tablet-portrait,
        @tabletViewportPrefix, @tabletSteps,
        @hdViewportPrefix, @hdSteps,
        @smartphoneViewportPrefix, @smartphoneSteps,
        @viewTotalColumns, @columnsSeparator,
        @useTabletRules
    );

    ._addFlexGridColumnSetRule(
        @from-hd-ready,
        @hdViewportPrefix, @hdSteps,
        @tabletViewportPrefix, @tabletSteps,
        @smartphoneViewportPrefix, @smartphoneSteps,
        @viewTotalColumns, @columnsSeparator,
        @useHdRules
    );

}

._setFlexGridViewprtColumns(@mediaQueryRule, @columns, @selector, @enableColumns) when not (@enableColumns = false) {
    @media @mediaQueryRule {
        .@{selector} > * {
            .flex-basis(unit((100 / @columns), %));
        }
    }
}

._addFlexGridColumnSetRule(
    @viewport,
    @firstChoiceViewportPrefix, @firstChoiceSteps,
    @secondChoiceViewportPrefix, @secondChoiceSteps,
    @thirdChoiceViewportPrefix, @thirdChoiceSteps,
    @viewTotalColumns, @columnsSeparator,
    @useRules
    ) {
    @media @viewport {
        // Smartphone portrait
        ._addFlexGridColumnSet(@thirdChoiceViewportPrefix,  @thirdChoiceSteps,  @viewTotalColumns, @columnsSeparator);
        ._addFlexGridColumnSet(@secondChoiceViewportPrefix, @secondChoiceSteps, @viewTotalColumns, @columnsSeparator);
        ._addFlexGridColumnSet(@firstChoiceViewportPrefix,  @firstChoiceSteps,  @viewTotalColumns, @columnsSeparator);
    }
}

._addFlexGridColumnSet(@prefix, @totalSteps, @viewTotalColumns, @columnsSeparator) {
    @startIndex : @totalSteps;
    ._loopFlexGridColumnSet(@totalSteps, @prefix, @startIndex, ~"", @viewTotalColumns, @columnsSeparator);
}

._loopFlexGridColumnSet(@total, @prefix, @index, @prevRule:~"", @viewTotalColumns, @columnsSeparator) when (@index = @total) and (@viewTotalColumns = true) {
    @nextRule : ~".@{prefix}@{index}@{columnsSeparator}@{total}";
    ._loopFlexGridColumnSet(@total, @prefix, @index - 1, @nextRule, @viewTotalColumns, @columnsSeparator);
}._loopFlexGridColumnSet(@total, @prefix, @index, @prevRule:~"", @viewTotalColumns, @columnsSeparator) when (@index > 0) and (@index < @total) and (@viewTotalColumns = true) {
    @nextRule : ~"@{prevRule}, .@{prefix}@{index}@{columnsSeparator}@{total}";
    ._loopFlexGridColumnSet(@total, @prefix, @index - 1, @nextRule, @viewTotalColumns, @columnsSeparator);
}._loopFlexGridColumnSet(@total, @prefix, @index, @prevRule:~"", @viewTotalColumns, @columnsSeparator) when (@index > 0) and (@viewTotalColumns = true) {
    .@{prefix}@{index}@{columnsSeparator}@{total} {
        ._setFlexGridColumnStep(@index, @total);
    }
}._loopFlexGridColumnSet(@total, @prefix, @index, @prevRule:~"", @viewTotalColumns, @columnsSeparator) when (@index = 0) and (@viewTotalColumns = true) {
    @{prevRule} {
        ._setFlexGridColumnBehavior();
    }
}
._loopFlexGridColumnSet(@total, @prefix, @index, @prevRule:~"", @viewTotalColumns, @columnsSeparator) when (@index = @total) and (@viewTotalColumns = false) {
    @nextRule : ~".@{prefix}@{index}";
    ._loopFlexGridColumnSet(@total, @prefix, @index - 1, @nextRule, @viewTotalColumns, @columnsSeparator);
}._loopFlexGridColumnSet(@total, @prefix, @index, @prevRule:~"", @viewTotalColumns, @columnsSeparator) when (@index > 0) and (@index < @total) and (@viewTotalColumns = false) {
    @nextRule : ~"@{prevRule}, .@{prefix}@{index}";
    ._loopFlexGridColumnSet(@total, @prefix, @index - 1, @nextRule, @viewTotalColumns, @columnsSeparator);
}._loopFlexGridColumnSet(@total, @prefix, @index, @prevRule:~"", @viewTotalColumns, @columnsSeparator) when (@index > 0) and (@viewTotalColumns = false) {
    .@{prefix}@{index} {
        ._setFlexGridColumnStep(@index, @total);
    }
}._loopFlexGridColumnSet(@total, @prefix, @index, @prevRule:~"", @viewTotalColumns, @columnsSeparator) when (@index = 0) and (@viewTotalColumns = false) {
    @{prevRule} {
        ._setFlexGridColumnBehavior();
    }
}

._setFlexGridColumnBehavior() {
    .box-sizing(border-box);
    .flex-grow(1);
}

._setFlexGridColumnStep(@currentColumn, @totalColumns) {
    .flex-basis(unit(((100% * @currentColumn)/@totalColumns), %));
}
